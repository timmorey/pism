# Copyright (C) 2012 David Maxwell
# 
# This file is part of PISM.
# 
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import PISM
from PISM.logging import logError, logMessage
from PISM.util import Bunch
from petsc4py import PETSc

import sys
import math

import siple
from PISM.sipletools import PISMLocalVector
from siple.gradient.forward import NonlinearForwardProblem
from siple.gradient.nonlinear import InvertNLCG, InvertIGN

siple.reporting.clear_loggers()
siple.reporting.add_logger(PISM.sipletools.pism_logger)
siple.reporting.set_pause_callback(PISM.sipletools.pism_pause)

WIDE_STENCIL = 2

class InvSSASolver_Siple:
  """Inverse SSA solver based on siple iteratve methods."""

  def __init__(self,ssarun,method):
    self.ssarun = ssarun
    self.config = ssarun.config
    self.method = method

    self.method = self.config.get_string('inv_ssa_method')

    self.rms_error = self.config.get("inv_ssa_target_rms_misfit");

    if PISM.optionsFlag("-inv_old_siple",""):
      self.forward_problem = SSAForwardProblem_depricated(ssarun)
    else:
      self.forward_problem = SSAForwardProblem(ssarun)
      

    # Determine the inversion algorithm, and set up its arguments.
    if self.method == "ign":
      Solver = InvertSSAIGN
    else:
      Solver = InvertSSANLCG

    params=Solver.defaultParameters()
    if self.method == "sd":
      params.steepest_descent = True
      params.ITER_MAX=10000
    elif self.method =="ign":
      params.linearsolver.ITER_MAX=10000
      params.linearsolver.verbose = True
    # if ls_verbose:
    #   params.linesearch.verbose = True
    params.verbose   = True
    params.deriv_eps = 0.

    self.siple_solver=Solver(self.forward_problem,params=params)

  def solveForward(self,zeta,out=None):
    if out is None:
      out = self.forward_problem.F(PISMLocalVector(zeta))
    else:
      out = self.forward_problem.F(PISMLocalVector(zeta),out=PISMLocalVector(out))
    return out.core()

  def addIterationListener(self,listener):
    self.siple_solver.addIterationListener(SipleIterationListenerAdaptor(self,listener))

  def addXUpdateListener(self,listener):
    self.siple_solver.addXUpdateListener(SipleXUpdateListenerAdaptor(self,listener))

  def addLinearIterationListener(self,listener):
    self.siple_solver.addLinearIterationListener(SipleLinearIterationListenerAdaptor(self,listener))

  def solveInverse(self,zeta0,u_obs,zeta_inv):
    try:
      (self.zeta_i,self.u_i) = self.siple_solver.solve(zeta_inv,u_obs,self.rms_error)
    except Exception:
      import traceback
      exc_type, exc_value, exc_traceback = sys.exc_info()
      description = ""
      for l in traceback.format_exception(exc_type, exc_value,exc_traceback):
        description += l
      # It would be nice to make siple so that if the inverse solve fails
      # you can still keep the most recent iteration. 
      self.u_i = None
      self.zeta_i = None
      return PISM.GenericTerminationReason(-1,description)
    return PISM.GenericTerminationReason(1,"Morozov Discrepancy Met")

  def inverseSolution(self):
    return (self.zeta_i,self.u_i)

def constructFunctionals(ssarun):
  vecs = ssarun.modeldata.vecs

  misfit_weight = None
  if vecs.has('vel_misfit_weight'):
    misfit_weight = vecs.vel_misfit_weight

  tauc_fixed_mask = None
  if vecs.has('zeta_fixed_mask'):
    tauc_fixed_mask = vecs.zeta_fixed_mask

  grid = ssarun.grid
  tauc_norm = grid.config.get_string("inv_ssa_tauc_norm")
  if tauc_norm != "hilbert":
    inv_method = grid.config.get_string("inv_ssa_method")
    raise Exception("'-inv_ssa_tauc_norm %s' is not supported with '-inv_method %s'.\nUse '-inv_ssa_tauc_norm hilbert' instead" % (tauc_norm,inv_method))
  cL2 = grid.config.get("inv_ssa_cL2");
  cH1 = grid.config.get("inv_ssa_cH1");

  area = 4*grid.Lx*grid.Ly;
  length_scale = grid.config.get("inv_ssa_length_scale");
  cL2 /= area;
  cH1 /= area;
  cH1 *= (length_scale*length_scale);

  designFunctional = PISM.H1NormFunctional2S(grid,cL2,cH1,tauc_fixed_mask)    

  velocity_scale = 1./PISM.secpera;

  stateFunctional = PISM.MeanSquareFunctional2V(grid,misfit_weight);    
  stateFunctional.normalize(velocity_scale);

  return (designFunctional,stateFunctional)

class SSAForwardProblem(NonlinearForwardProblem):

  def __init__(self,ssarun):
    self.ssarun = ssarun
    self.ssa = self.ssarun.ssa
    self.grid = ssarun.grid

    self.tmpV = PISM.IceModelVec2V();
    self.tmpV.create(self.grid, "work vector (2V)", PISM.kNoGhosts, WIDE_STENCIL);

    self.tmpS = PISM.IceModelVec2S();
    self.tmpS.create(self.grid, "work vector (2S)", PISM.kNoGhosts, WIDE_STENCIL);

    self.tmpS2 = PISM.IceModelVec2S();
    self.tmpS2.create(self.grid, "work vector (2S)", PISM.kNoGhosts, WIDE_STENCIL);

    ksp_rtol = 1e-12;
    self.ksp = PETSc.KSP();
    self.ksp.create(self.grid.com)
    self.ksp.setTolerances(ksp_rtol,PETSc.DEFAULT,PETSc.DEFAULT,PETSc.DEFAULT);
    self.ksp.getPC().setType('bjacobi')
    self.ksp.setFromOptions()

    (self.designFunctional,self.stateFunctional) = constructFunctionals(ssarun)
    
    self.designForm = None


  def F(self, x,out=None,guess=None):
    """
    Returns the value of the forward problem at x.

    Nonlinear problems often make use of an initial guess; this can be provided in 'guess'.

    Storage in 'out', if given, is used for the return value.
    """
    if out is None:
      out = self.rangeVector()
    reason = self.ssa.linearize_at(x.core())
    if reason.failed():
      raise PISM.AlgorithmFailureException(reason.description())
    out.core().copy_from(self.ssa.solution())
    return out

  def T(self,d,out=None):
    """
    Returns the value of the linearization, T, of F, at the point x specified previously in linearizeAt, 
    in the direction d.

    Storage in 'out', if given, is used for the return value.
    """
    if out is None:
      out = self.rangeVector()
    self.ssa.apply_linearization(d.core(),out.core())
    return out

  def TStar(self,r,out=None):
    """
    Let T be the linearization of F at the point x (at the point x specified previously in linearizeAt).  
    Its adjoint is T*.  This method returns the value of T* in the direction r.

    Storage in 'out', if given, is used for the return value.
    """
    if out is None:
      out = self.domainVector()

    if self.designForm is None:
      da2 = self.grid.get_dm(1, self.grid.max_stencil_width)
      self.designForm = da2.getMatrix("baij")
      self.designFunctional.assemble_form(self.designForm)

    # First step
    self.stateFunctional.gradientAt(r.core(),self.tmpV)
    self.tmpV.scale(0.5)
    self.ssa.apply_linearization_transpose(self.tmpV,self.tmpS)

    # Second step
    self.ksp.setOperators(self.designForm,self.designForm,PETSc.Mat.Structure.SAME_NONZERO_PATTERN)
    self.ksp.solve(self.tmpS.get_vec(),self.tmpS2.get_vec())
    reason = self.ksp.getConvergedReason()
    if reason < 0:
      raise RuntimeError('TStarB linear solve failed to converge (KSP reason %s)\n\n' % reason)
    else:
      PISM.logging.logPrattle("TStarB converged (KSP reason %s)\n" % reason )
    
    out.core().copy_from(self.tmpS2)
    return out

  def linearizeAt(self,x,guess=None):
    """
    Instructs the class that subsequent calls to T and TStar will be conducted for the given value of x.

    Nonlinear problems often make use of an initial guess; this can be provided in 'guess'.
    """
    reason = self.ssa.linearize_at(x.core())
    if reason.failed():
      raise Exception(reason.description())

  def evalFandLinearize(self,x,out=None,guess=None):
    """
    Computes the value of F(x) and locks in a linearization.  Sometimes there are efficiencies that
    can be acheived this way.

    Default implementation simply calls F, then linearizeAt.
    """
    if out is None:
      out = self.rangeVector()
    self.linearizeAt(x)
    out.core().copy_from(self.ssa.solution())
    return out

  def rangeIP(self,a,b):
    """
    Computes the inner product of two vectors in the range.
    """
    return self.stateFunctional.dot(a.core(),b.core())

  def domainIP(self,a,b):
    """
    Computes the inner product of two vectors in the domain.
    """
    return self.designFunctional.dot(a.core(),b.core())

  def rangeVector(self):
    """Constructs a brand new vector from the range vector space"""
    v = PISM.IceModelVec2V()
    v.create(self.grid,"",True,WIDE_STENCIL)

    # Add appropriate meta data.
    intent = "?inverse?" # FIXME
    desc = "SSA velocity computed by inversion"
    v.set_attrs(intent, "%s%s" %("X-component of the ",desc), "m s-1", "", 0);
    v.set_attrs(intent, "%s%s" %("Y-component of the ",desc), "m s-1", "", 1);
    v.set_glaciological_units("m year-1");
    v.write_in_glaciological_units = True
    huge_vel = 1e6/PISM.secpera;
    attrs = [ ("valid_min", -huge_vel), ("valid_max", huge_vel), ("_FillValue", 2*huge_vel) ]
    for a in attrs: 
      for component in range(2):
        v.set_attr(a[0],a[1],component)

    return PISMLocalVector(v)

  def domainVector(self):
    """Constructs a brand new vector from the domain vector space"""
    v = PISM.IceModelVec2S()
    v.create(self.grid,"",True,WIDE_STENCIL)
    return PISMLocalVector(v)

class SSAForwardProblem_depricated(NonlinearForwardProblem):

  def __init__(self,ssarun):
    self.ssarun = ssarun
    self.ssa = self.ssarun.ssa
    self.grid = ssarun.grid

  def F(self, x,out=None,guess=None):
    """
    Returns the value of the forward problem at x.

    Nonlinear problems often make use of an initial guess; this can be provided in 'guess'.

    Storage in 'out', if given, is used for the return value.
    """
    # if not guess is None:
    #   self.solver.set_initial_velocity_guess(guess)
    if out is None:
      out = self.rangeVector()
    self.ssa.set_zeta(x.core())
    self.ssa.solveF(out.core())
    return out

  def T(self,d,out=None):
    """
    Returns the value of the linearization, T, of F, at the point x specified previously in linearizeAt, 
    in the direction d.

    Storage in 'out', if given, is used for the return value.
    """
    if out is None:
      out = self.rangeVector()
    self.ssa.solveT(d.core(),out.core())
    return out

  def TStar(self,r,out=None):
    """
    Let T be the linearization of F at the point x (at the point x specified previously in linearizeAt).  
    Its adjoint is T*.  This method returns the value of T* in the direction r.

    Storage in 'out', if given, is used for the return value.
    """
    if out is None:
      out = self.domainVector()
    self.ssa.solveTStar(r.core(),out.core())
    return out

  def linearizeAt(self,x,guess=None):
    """
    Instructs the class that subsequent calls to T and TStar will be conducted for the given value of x.

    Nonlinear problems often make use of an initial guess; this can be provided in 'guess'.
    """
    self.ssa.set_zeta(x.core())

  def evalFandLinearize(self,x,out=None,guess=None):
    """
    Computes the value of F(x) and locks in a linearization.  Sometimes there are efficiencies that
    can be acheived this way.

    Default implementation simply calls F, then linearizeAt.
    """
    if out is None:
      out = self.rangeVector()
    self.linearizeAt(x)
    self.ssa.solveF(out.core())
    return out

  def rangeIP(self,a,b):
    """
    Computes the inner product of two vectors in the range.
    """
    return self.ssa.rangeIP(a.core(),b.core())

  def domainIP(self,a,b):
    """
    Computes the inner product of two vectors in the domain.
    """
    return self.ssa.domainIP(a.core(),b.core())

  def rangeVector(self):
    """Constructs a brand new vector from the range vector space"""
    v = PISM.IceModelVec2V()
    v.create(self.grid,"",True,WIDE_STENCIL)

    # Add appropriate meta data.
    intent = "?inverse?" # FIXME
    desc = "SSA velocity computed by inversion"
    v.set_attrs(intent, "%s%s" %("X-component of the ",desc), "m s-1", "", 0);
    v.set_attrs(intent, "%s%s" %("Y-component of the ",desc), "m s-1", "", 1);
    v.set_glaciological_units("m year-1");
    v.write_in_glaciological_units = True
    huge_vel = 1e6/PISM.secpera;
    attrs = [ ("valid_min", -huge_vel), ("valid_max", huge_vel), ("_FillValue", 2*huge_vel) ]
    for a in attrs: 
      for component in range(2):
        v.set_attr(a[0],a[1],component)

    return PISMLocalVector(v)

  def domainVector(self):
    """Constructs a brand new vector from the domain vector space"""
    v = PISM.IceModelVec2S()
    v.create(self.grid,"",True,WIDE_STENCIL)
    return PISMLocalVector(v)


class InvertSSANLCG(InvertNLCG):
  """
  Inversion of the map

    F: gamma |-> u

  where u is the solution of the PDE

    -Laplacian u + gamma u = f

  F is a map from L^2 to L^2.
  """

  @staticmethod
  def defaultParameters():
    params = InvertNLCG.defaultParameters()
    return params

  def __init__(self,forward_problem,params=None):
    InvertNLCG.__init__(self,params)
    self.forward_problem = forward_problem

  def forwardProblem(self):
    return self.forward_problem

  def stopConditionMet(self,count,x,Fx,y,r):
    """
    Determines if minimization should be halted (based, e.g. on a Morozov discrepancy principle)

    In: count: current iteration count
        x:     point in domain of potential minimizer.
        Fx:    value of nonlinear function at x
        r:     current residual, i.e. y-F(x)    
    """

    misfit = math.sqrt(abs(self.forward_problem.rangeIP(r,r)));

    siple.reporting.msg('(%d) misfit=%g goal=%g',count,misfit,self.misfit_goal)

    if( misfit < self.misfit_goal ):
      siple.reporting.msg('Stop condition met')
      return True
    return False

  def initialize(self,x,y,deltaLInf):
    """
    Hook called at the start of solve.  This gives the class a chance to massage the input.
    For example, x and y might be dolfin (finite element) Functions; this method should return 
    the associated dolfin GenericVectors.

    The remaining arguments are passed directly from solve, and can be used for determining the
    final stopping criterion.

    Returns dolfin vectors corresponding to the initial value of x and the desired value of y=F(x).    
    """
    xv = PISMLocalVector(x)
    yv = PISMLocalVector(y)

    self.misfit_goal = self.params.mu*deltaLInf

    return (xv,yv)

  def finalize(self,x,y):
    """
    Hook called at the end of 'solve'.  Gives the chance to massage the return values.
    """
    tauc = x.core()
    u = y.core()
    return (tauc,u)

  def solve(self,x,y,deltaLInf):
    """
    Solve the ill posed problem F(x)=y where y is know to an L infinity error deltaLInf
    """
    return InvertNLCG.solve(self,x,y,deltaLInf)

class InvertSSAIGN(InvertIGN):
  """
  Inversion of the map

    F: gamma |-> u

  where u is the solution of the PDE

    -Laplacian u + gamma u = f

  F is a map from L^2 to L^2.
  """

  @staticmethod
  def defaultParameters():
    params = InvertIGN.defaultParameters()
    return params

  def __init__(self,forward_problem,params=None):
    InvertIGN.__init__(self,params)
    self.forward_problem = forward_problem

  def forwardProblem(self):
    return self.forward_problem

  def temper_d(self, x,d,y,r):
    dnorm = d.norm('linf');  xnorm = x.norm('linf')
    if dnorm > 2*xnorm:
      siple.reporting.msg('wild change predicted by linear step. scaling')
      d.scale(2*xnorm/dnorm)

  def initialize(self,x,y,deltaLInf):
    """
    Hook called at the start of solve.  This gives the class a chance to massage the input.
    For example, x and y might be dolfin (finite element) Functions; this method should return 
    the associated dolfin GenericVectors.

    The remaining arguments are passed directly from solve, and can be used for determining the
    final stopping criterion.

    Returns dolfin vectors corresponding to the initial value of x and the desired value of y=F(x).    
    """
    xv = PISMLocalVector(x)
    yv = PISMLocalVector(y)

    Jgoal = deltaLInf

    return (xv,yv,Jgoal)

  def finalize(self,x,y):
    """
    Hook called at the end of 'solve'.  Gives the chance to massage the return values.
    """

    tauc = x.core()
    u = y.core()

    return (tauc,u)

  def solve(self,x,y,deltaLInf):
    """
    Solve the ill posed problem F(x)=y where y is know to an L infinity error deltaLInf
    """
    return InvertIGN.solve(self,x,y,deltaLInf)


class SipleIterationListenerAdaptor:
  """Adaptor for passing listening events from siple-based solvers to a python object."""
  def __init__(self,owner,listener):
    self.owner = owner
    self.listener = listener
  def __call__(self,siplesolver,it,x,Fx,y,d,r,*args):    
    data = Bunch(zeta=x.core(),u=Fx.core(),u_obs=y.core(),d_zeta=d.core(),r=r.core(),rms_error=self.owner.rms_error)

    if self.owner.method == 'ign':
      data.update(Td=args[0].core())
    else:
      data.update(TStarR=args[0].core())
    try:
      self.listener(self.owner,it,data)
    except Exception as e:
      logError("\nWARNING: Exception occured during an inverse solver listener callback:\n%s\n\n" % str(e))

class SipleLinearIterationListenerAdaptor:
  """Adaptor for passing listening events the linear steps of siple-based ign solvers to a python object."""
  def __init__(self,owner,listener):
    self.owner = owner
    self.listener = listener

  def __call__(self,siplesolver,it,x, y, d, r, Td, TStarR):    

    data = Bunch(x=x.core(),y=y.core(),r=r.core(),d=d.core(),Td=Td.core(),TSTarR=TStarR.core())
    try:
      self.listener(self.owner,it,data)
    except Exception as e:
      logError("\nWARNING: Exception occured during an inverse solver listener callback:\n%s\n\n" % str(e))

class SipleXUpdateListenerAdaptor:
  """Adaptor for passing listening events the linear steps of siple-based ign solvers to a python object."""
  def __init__(self,owner,listener):
    self.owner = owner
    self.listener = listener

  def __call__(self,siplesolver,it,zeta,u,u_obs,r):    
    data = Bunch(zeta=zeta.core(),u=u.core(),r=r.core(),u_obs=u_obs.core())
    try:
      self.listener(self.owner,it,data)
    except Exception as e:
      logError("\nWARNING: Exception occured during an inverse solver XUpdate listener callback:\n%s\n\n" % str(e))


